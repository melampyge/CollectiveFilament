#!/usr/local/bin/python2.7
### read in the center of mass positions
### compute the center of mass velocity (by direction and absolute quantities)


import numpy as np
import sys, os, math
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import matplotlib.cm as cmx
import random

try:
    fname = sys.argv[1]
    nsteps = int(sys.argv[2])
    nskip = int(sys.argv[3])
    lrod = int(sys.argv[4])
    imgflag = int(sys.argv[5])
except:
    print 'Usage: ' + sys.argv[0] + '       dump file      #(snapshots)     nskip      rod length     imgflag'
    exit()

############################################################################

def read_positions(ifile):
    """ read in information from the dump file"""
    ### header information
    # timestep
    ifile.readline()
    line = ifile.readline()
    line = line.split()
    t = int(line[0])
    # number of atoms
    ifile.readline()
    line = ifile.readline()
    line = line.split()
    natoms = int(line[0])
    # box diemnsions
    ifile.readline()
    line = ifile.readline()
    line = line.split()
    lx = float(line[1])
    line = ifile.readline()
    line = line.split()
    ly = float(line[1])
    # rest of the header
    ifile.readline()
    ifile.readline()

    # allocate arrays to store x and y
    x = np.zeros((natoms))
    y = np.zeros((natoms))

    # loop over snapshot and read in data
    for i in range(natoms):
        line = ifile.readline()
        line = line.split()
        aID = int(line[0])-1
        xs = float(line[2])
        ys = float(line[3])
        xi = lx*xs
        yi = ly*ys
        x[aID] = xi
        y[aID] = yi
    return t,x,y,lx,ly

############################################################################

def min_neigh(x1,x2,lx):
    """ determine minimum neighbor position"""
    dx1 = math.fabs(x2 - x1)
    dx2 = math.fabs(x2 - x1 - lx)
    dx3 = math.fabs(x2 - x1 + lx)
    if dx1 < dx2 and dx1 < dx3:
        return x2
    elif dx2 < dx3:
        return x2 -lx
    else:
        return x2 + lx
    
############################################################################

def correct_pbc(x,y,lx,ly):
    """ connect molecules that are separated because ob pbcs.
        Molecule com might be moved out of the box"""
    # determine number of molecules
    natoms = len(x)
    nrod = natoms/lrod

    # loop over all rods
    for i in range(nrod):
        # loop over single rod and adjust positions
        for j in range(lrod-1):
            x1 = x[i*lrod + j]
            x2 = x[i*lrod + j+1]
            x[i*lrod + j+1] = min_neigh(x1,x2,lx)
            y1 = y[i*lrod + j]
            y2 = y[i*lrod + j+1]
            y[i*lrod + j+1] = min_neigh(y1,y2,ly)
    return

############################################################################

def compute_com(x,y,lx,ly):
    """ compute com and move molecule back into the box if required"""
    # determine number of molecules and allocate com arrays
    natoms = len(x)
    nrod = natoms/lrod
    comx = np.zeros((nrod))
    comy = np.zeros((nrod))

    # loop over all rods
    for i in range(nrod):
        # loop over single rod and compute com
        for j in range(lrod):
            comx[i] += (x[i*lrod+j] - comx[i])/(j+1)
            comy[i] += (y[i*lrod+j] - comy[i])/(j+1)
    # loop over all rods and put them back into the box, if necessary
    for i in range(nrod):
        dx = 0
        if comx[i] < 0:
            dx = lx
        if comx[i] > lx:
            dx = -lx
        comx[i] += dx
        for j in range(lrod):
            x[i*lrod+j] += dx

        dy = 0
        if comy[i] < 0:
            dy = ly
        if comy[i] > ly:
            dy = -ly
        comy[i] += dy
        for j in range(lrod):
            y[i*lrod+j] += dy

    return comx, comy
            
############################################################################

def compute_angle(x,y):
    """ compute the angle that connects the first and the last atom"""
    # compute number of rods and allocate array
    natoms = len(x)
    nrod = natoms/lrod
    phi = np.zeros((nrod))

    # loop over all rods and compute angle
    for i in range(nrod):
        x1 = x[lrod*i]
        x2 = x[lrod*(i+1)-1]
        y1 = y[lrod*i]
        y2 = y[lrod*(i+1)-1]
        delx = x2 - x1
        dely = y2 - y1
        # compute angle relative to x axis
        phi[i] = math.atan2(dely,delx)
    # adjust valies of phi to the interval (0,pi)
    for i in range(nrod):
        if phi[i] < 0:
            phi[i] += np.pi
    return phi

############################################################################

def gen_plot(x,y,phi,ti,lx,ly):
    """ generate a plot of the image and color code the angle of
        the rods by their orientation"""
    # try to generate an output folder for figures
    os.system('mkdir IMGS')
    # number of atoms and rods
    natoms = len(x)
    nrods = len(phi)

    # gen phi2 vector for colloring
    phi2 = np.zeros((natoms))
    for i in range(nrods):
        for j in range(lrod):
            phi2[i*lrod+j] = phi[i]
    x2 = np.append(x,[-1000,-1001])
    y2 = np.append(y,[-1000,-10001])
    phi2 = np.append(phi2,[0.0,np.pi])

    
    # create a figure and axes
    fig = plt.figure(figsize = (12,12))
    ax = fig.add_axes((0.0,0.0,1.0,1.0))
    # plot the box boundary
    ax.plot([0,lx],[0,0], color = 'k')
    ax.plot([0,lx],[ly,ly], color = 'k')
    ax.plot([0,0],[0,ly], color = 'k')
    ax.plot([lx,lx],[0,ly], color = 'k')

    # add molecules
    ax.scatter(x2,y2,c=phi2,cmap='hsv', edgecolor = 'none', s = 4)

    # set axis properties
    ax.set_xlim([-lrod/2,lx+lrod/2])
    ax.set_ylim([-lrod/2,ly+lrod/2])
    ax.set_xticks([])
    ax.set_yticks([])
    plt.savefig('IMGS/phase_' + str(ti) + '.png')
    plt.close()
    return

############################################################################

def gen_linked_list(x,y,lx,ly,rc):
    """ generate a linked list"""
    # determine the number of cells in each direction
    nsegx = int(lx/rc)
    nsegy = int(ly/rc)

    # allocate head and llist
    ncells = nsegx*nsegy
    natoms = len(x)
    head = np.zeros((ncells), dtype = int)
    llist = np.zeros((natoms), dtype = int)

    # fill list and head
    for i in range(natoms):
        segx = int(x[i]/lx*nsegx)
        segy = int(y[i]/ly*nsegy)
        cell = segx*nsegy + segy
        llist[i] = head[cell]
        head[cell] = i
    
    return nsegx,nsegy,head,llist

############################################################################

def get_order_parameter(x,y,phi,lx,ly):
    """ compute the nematic order parameter"""
    # generate a linked list
    rc = 4.499*lrod
    nsegx, nsegy, head, llist = gen_linked_list(x,y,lx,ly,rc)
    # loop over the linked list
    Si = 0
    counter = 0
    cos = np.cos(2*phi)
    sin = np.sin(2*phi)
    # loop over cells
    for i in range(nsegx):
        for j in range(nsegy):
            # store header of current cell
            sv1 = head[i*nsegy + j]
            # loop over neighboring cells
            for a in range(3):
                i2 = (i-1+a)%nsegx
                for b in range(3):
                    j2 = (j-1+b)%nsegy
                    # store header of neighbor cell
                    sv2 = head[i2*nsegy + j2]
                    
                    # restore head values at for each new cell
                    val1 = sv1
                    val2 = sv2
                    while val1 != 0:
                        cos1 = cos[val1]
                        sin1 = sin[val1]
                        x1 = x[val1]/lx
                        y1 = y[val1]/ly
                        while val2 != 0:
                            if val1 != val2:
                                x2 = x[val2]/lx
                                y2 = y[val2]/ly
                                dx = x2-x1
                                dx = dx - math.floor(dx + 0.5)
                                dx = dx*lx
                                dy = y2-y1
                                dy = dy - math.floor(dy + 0.5)
                                dy = dy*ly
                                if dx**2 + dy**2 < rc**2:
                                    cos2 = cos[val2]
                                    sin2 = sin[val2]
                                    Si = Si + cos1*cos2 + sin1*sin2
                                    counter = counter + 1
                            val2 = llist[val2]
                        val1 = llist[val1]
                        val2 = sv2
    Si = Si/counter
    return Si
    

############################################################################

def run_analysis():
    """ run the analysis"""
    ifile = open(fname)
    t = []
    S = []
    for i in range(nsteps):
        # read in all positions
        ti,x,y,lx,ly = read_positions(ifile)
        # check whether to skip current frame
        if i%nskip != 0:
            continue
        print '  working on step',i
        # connect molecules that are separated because of pbcs 
        correct_pbc(x,y,lx,ly)
        # compute com and transfer molecule back to box if required
        comx,comy = compute_com(x,y,lx,ly)
        # compute the angle for each molecule
        phi = compute_angle(x,y)
        # generate a plot
        if imgflag:
            gen_plot(x,y,phi,ti,lx,ly)
        # compute the nematic order parameter
        Si = get_order_parameter(comx,comy,phi,lx,ly)
        # append results to arrays
        t.append(ti)
        S.append(Si)
    ifile.close()
    t = np.array(t)
    S = np.array(S)
    return t,S #

############################################################################

def write_results(t,S):
    """ write down the results"""
    ofile = open('order_parameter.data', 'w')
    ofile.write('# Evolution of the order parameter over time\n\n')
    ofile.write('t\tS\n')
    for i in range(len(t)):
        ofile.write(str(t[i]) + '\t' + str(S[i]) + '\n')
    ofile.close()
    return

############################################################################

def main():
    """ main function, called when the scrit is started"""
    # perform the analysis
    t,S = run_analysis()
    # write down results to a file
    write_results(t,S)
    
    plt.plot(t,S,ls = '', marker = 'o')
    plt.show()
    plt.close()
    return

############################################################################

if __name__ == '__main__':
    main()
